*vim-iced.txt*      Clojure interactive development environment for Vim8/Neovim

Version: 0.8.2
Author : Masashi Iizuka <liquidz.uo+vim@gmail.com>
License: MIT LICENSE

==============================================================================
CONTENTS                                                    *vim-iced-contents*

  Introduction                 |vim-iced-introduction|
  Install                      |vim-iced-install|
    Iced command               |vim-iced-install-command|
    Manual Install             |vim-iced-install-manually|
      Leiningen                |vim-iced-manual-leiningen|
      Boot                     |vim-iced-manual-boot|
    Boost by Python            |vim-iced-install-python|
  nREPL Connection             |vim-iced-nrepl-connection|
  ClojureScript                |vim-iced-clojurescript|
    GraalJS                    |vim-iced-graaljs|
  Evaluating                   |vim-iced-evaluating|
    Stdout Buffer              |vim-iced-stdout-buffer|
  Testing                      |vim-iced-testing|
  Debugging                    |vim-iced-debugging|
  Skeleton                     |vim-iced-skeleton|
  Tag Jump                     |vim-iced-tag-jump|
  Editing S-exp                |vim-iced-editing-s-exp|
    Formatting                 |vim-iced-formatting|
    Refactoring                |vim-iced-refactoring|
    Linting                    |vim-iced-linting|
  Interface                    |vim-iced-interface|
    Commands                   |vim-iced-commands|
    Functions                  |vim-iced-functions|
    Key Mappings               |vim-iced-key-mappings|
  Customizing                  |vim-iced-customizing|
    Indent rules               |vim-iced-customizing-indents|
    Linters                    |vim-iced-customizing-linters|
    Command palettes           |vim-iced-customizing-palette|
    Default keys               |vim-iced-customizing-default-keys|
  Changelog                    |vim-iced-changelog|

==============================================================================
INTRODUCTION                                            *vim-iced-introduction*

  Clojure interactive development environment for Vim8/Neovim.

  Requirement:
  - Vim 8.1 or later, Neovim 0.3.1 or later
    Neovim support is VERY EXPERIMENTAL
  - Clojure 1.8 or later
    1.9 or later is recommended

  Latest Version:
  - https://github.com/liquidz/vim-iced

==============================================================================
INSTALL                                                      *vim-iced-install*

  Vim plugin dependencies:

  - vim-sexp
    https://github.com/guns/vim-sexp
  - selector
    One of following is required when selecting multiple candidates
    - ctrlp.vim
      https://github.com/ctrlpvim/ctrlp.vim
    - fzf
      https://github.com/junegunn/fzf

  Clojure library dependencies:
  - Leiningen user: |vim-iced-leiningen|
  - Boot user: |vim-iced-boot|

------------------------------------------------------------------------------
ICED COMMAND                                         *vim-iced-install-command*

  vim-iced provides `iced` command to use vim-iced easily.

  Add `$PATH` environment variable to `/path/to/vim-iced/bin`.

------------------------------------------------------------------------------
MANUAL INSTALL                                      *vim-iced-install-manually*


                                                    *vim-iced-manual-leiningen*
LEININGEN~

  $HOME/.lein/profile.clj
>
  {:user
   {:dependencies [[nrepl "0.4.5"]
                   [iced-nrepl "0.2.4"]
                   [cider/cider-nrepl "0.19.0-SNAPSHOT"]]
    :repl-options {:nrepl-middleware [cider.nrepl/wrap-complete
                                      cider.nrepl/wrap-debug
                                      cider.nrepl/wrap-format
                                      cider.nrepl/wrap-info
                                      cider.nrepl/wrap-macroexpand
                                      cider.nrepl/wrap-ns
                                      cider.nrepl/wrap-out
                                      cider.nrepl/wrap-pprint
                                      cider.nrepl/wrap-pprint-fn
                                      cider.nrepl/wrap-spec
                                      cider.nrepl/wrap-test
                                      cider.nrepl/wrap-trace
                                      cider.nrepl/wrap-undef
                                      iced.nrepl/wrap-iced]}
    :plugins [[refactor-nrepl "2.4.0"]]}}
<

                                                         *vim-iced-manual-boot*
BOOT~

  $HOME/.boot/profile.boot
>
  (require (quote boot.repl))

  (swap! boot.repl/*default-dependencies* concat
    '[[refactor-nrepl "2.4.0"]
      [cider/cider-nrepl "0.19.0-SNAPSHOT"]
      [iced-nrepl "0.2.4"]])

  (swap! boot.repl/*default-middleware* concat
    '[cider.nrepl/wrap-complete
      cider.nrepl/wrap-debug
      cider.nrepl/wrap-format
      cider.nrepl/wrap-info
      cider.nrepl/wrap-macroexpand
      cider.nrepl/wrap-ns
      cider.nrepl/wrap-out
      cider.nrepl/wrap-pprint
      cider.nrepl/wrap-pprint-fn
      cider.nrepl/wrap-spec
      cider.nrepl/wrap-test
      cider.nrepl/wrap-trace
      cider.nrepl/wrap-undef
      refactor-nrepl.middleware/wrap-refactor
      iced.nrepl/wrap-iced])
<
==============================================================================
BOOST BY PYTHON                                       *vim-iced-install-python*

  vim-iced does not require `if_python3` basically,
  and all communication with nrepl is done by pure vim script.

  But pure vim script is slow.
  So vim-iced uses `if_python3` to boost process if it is enabled.

==============================================================================
NREPL CONNECTION                                    *vim-iced-nrepl-connection*

  REPL needs to be activated beforehand.
  - `iced repl` to start REPL
    `iced` command must be installed.
    See |vim-iced-install-command|.

  |:IcedConnect| to connect nREPL.
  If not connected at the time of evaluation,
  vim-iced will connect automatically using '.nrepl-port' file.

  |:IcedDisconnect| to disconnect nREPL.

==============================================================================
CLOJURE SCRIPT                                         *vim-iced-clojurescript*

  Supports following environment currently.
  - figwheel
  - graaljs
    ClojureScript 1.10.439 or later is required.
  - nashorn
  - custom

  With {custom} environment, you can define start/stop code.
  - |g:iced#cljs#custom#start_code|
  - |g:iced#cljs#custom#stop_code|

  |IcedStartCljsRepl| to start cljs-repl.
  |IcedQuitCljsRepl| to quit it.

------------------------------------------------------------------------------
GRAALJS                                                      *vim-iced-graaljs*

  At first, ClojureScript 1.10.439 or later is required.

  GraalVM is also required, and you must add GraalVM `/bin` to your `PATH`.
  c.f. https://www.graalvm.org/docs/getting-started/#install-graalvm
  Otherwise you can set `PATH` temporarily when you execute `iced` command.
>
  $ PATH=/path/to/graalvm/bin:$PATH iced repl
<
==============================================================================
EVALUATING                                                *vim-iced-evaluating*

  |:IcedEval| is the simplest way to evaluate forms.
  But working with {vim-sexp} is the best.
  See details: |<Plug>(iced_eval)|

  |:IcedEvalRepl| will evaluate form in REPL session.
  See details: |<Plug>(iced_eval_repl)|

------------------------------------------------------------------------------
STDOUT BUFFER                                          *vim-iced-stdout-buffer*

  Standard outputs will be outputted to dedicated buffer.
  |:IcedStdoutBufferOpen| to open it.
  |:IcedStdoutBufferClear| to clear all outputted lines.

  If you show buffer content in another application or display,
  |g:iced#buffer#stdout#file| option is available for writing file.

==============================================================================
TESTING                                                      *vim-iced-testing*

  vim-iced provides following test commands.
  - |:IcedTestUnderCursor|
  - |:IcedTestNs|
  - |:IcedTestAll|
  - |:IcedTestRedo|
  - |:IcedTestSpecCheck|
  - |:IcedTestRerunLast|

  When tests are failed, vim-iced sets error positions to |quickfix|.
  |:cwindow| command enables you to show this information.

  To show quickfix automatically, following autocmd is useful.
>
  aug VimIcedAutoOpenQuickfix
    au!
    au QuickFixCmdPost vim-iced cwindow
  aug END
<
==============================================================================
DEBUGGING                                                  *vim-iced-debugging*

  vim-iced supports cider's `#dbg` and `#break` reader literals.
  Easiest way is to put `#dbg` to your code, and evaluate it.
>
  (defn fib
    ([n] (fib 0 1 n))
    ([a b n]
      (if (<= n 0)
       a
       #dbg (recur b (+ a b) (dec n)))))
<
  Related options:
  - |g:iced#debug#value_max_length|

==============================================================================
SKELETON                                                    *vim-iced-skeleton*

  vim-iced provides code skeleton when you open new clojure files.
  Currently, these extensions are supported.
  - `*.clj`
  - `*.cljs`
  - `*.cljc`

==============================================================================
TAG JUMP                                                    *vim-iced-tag-jump*

  |:IcedDefJump| to jump to definition.
  |:IcedDefBack| to jump back.

==============================================================================
EDITING S-EXP                                          *vim-iced-editing-s-exp*

  Provides slurp and barf function.
  - |IcedSlurp|
  - |IcedBarf|

------------------------------------------------------------------------------
FORMATTING                                                *vim-iced-formatting*

  vim-sexp also provides formatting codes function.
  If you want to use vim-iced's formatting function,
  you should define {g:sexp_mappings} as follows.
>
  let g:sexp_mappings = {'sexp_indent': '', 'sexp_indent_top': ''}
<
------------------------------------------------------------------------------
REFACTORING                                              *vim-iced-refactoring*

  Provides following functions powered by refactor-nrepl.
  - |:IcedCleanNs| (|<Plug>(iced_clean_ns)|)
  - |:IcedAddMissing| (|<Plug>(iced_add_missing)|)
  - |:IcedThreadFirst| (|<Plug>(iced_thread_first)|)
  - |:IcedThreadLast| (|<Plug>(iced_thread_last)|)
  - |:IcedExtractFunction| (|<Plug>(iced_extract_function)|)
  - |:IcedMoveToLet| (|<Plug>(iced_move_to_let)|)

------------------------------------------------------------------------------
LINTING                                                      *vim-iced-linting*

  vim-iced can collaborate with `jonase/eastwood` and `joker`.
  - https://github.com/jonase/eastwood
    - works for Clojure
  - https://github.com/candid82/joker
    - works for ClojureScript
    - needs to be installed separately from vim-iced
  - Command
    - |:IcedLintCurrentFile| (|<Plug>(iced_lint_current_file)|)

  To run linter automatically, set |g:iced_enable_auto_linting| to `v:true`.
>
  let g:iced_enable_auto_linting = v:true
<
  If you would like to set manually, following autcmd is useful.
>
  aug vim_iced_lint_setting
    au!
    au BufWritePost *.clj,*.cljs,*.cljc call iced#lint#current_file()
    au CursorMoved  *.clj,*.cljs,*.cljc call iced#lint#echo_message()
  aug END
<
  To define which linters to use, see |g:iced#eastwood#option|.

==============================================================================
INTERFACE                                                  *vim-iced-interface*

------------------------------------------------------------------------------
COMMANDS                                                    *vim-iced-commands*

                                                                 *:IcedConnect*
:IcedConnect [{port}]
  Make connection to nREPL.
  If {port} is not passed, {port} is detected by '.nrepl-port' automatically.
  Key is mapped to |<Plug>(iced_connect)|.

                                                              *:IcedDisconnect*
:IcedDisconnect
  Disconnect from nREPL.
  Automatically disconnected at leaving vim.
  Key is mapped to |<Plug>(iced_disconnect)|.

                                                               *:IcedReconnect*
:IcedReconnect
  Disconnect from nREPL, and make connection to nREPL again.
  Previous sessions are closed.
  Key is mapped to |<Plug>(iced_reconnect)|.

                                                               *:IcedInterrupt*
:IcedInterrupt
  Interrupt some code evaluation in current session.
  Key is mapped to |<Plug>(iced_interrupt)|.

                                                           *:IcedStartCljsRepl*
:IcedStartCljsRepl [{env}]
  Start CLJS REPL with specified environment.
  REPL session changes to 'cljs.user' namespace.
  If {env} is not passed, |g:iced#cljs#default_env| is used.

  Supports following environment currently.
  - figwheel
  - nashorn
  - custom
    see |g:iced#cljs#custom#start_code|
        |g:iced#cljs#custom#stop_code|

  Key is mapped to |<Plug>(iced_start_cljs_repl)|.

                                                            *:IcedQuitCljsRepl*
:IcedQuitCljsRepl
  Quit CLJS REPL.
  REPL session changes to 'user' namespace.
  Key is mapped to |<Plug>(iced_quit_cljs_repl)|.

                                                                    *:IcedEval*
:IcedEval {form}
  Evaluate {form} in current session.
  See details: |<Plug>(iced_eval)|

                                                                *:IcedEvalRepl*
:IcedEvalRepl {form}
  Evaluate {form} in REPL session.
  See details: |<Plug>(iced_eval_repl)|

                                                                  *:IcedEvalNs*
:IcedEvalNs
  Evaluate `ns` form in current session.
  Key is mapped to |<Plug>(iced_eval_ns)|

                                                                 *:IcedRequire*
:IcedRequire
  Load current file in current session.
  Key is mapped to |<Plug>(iced_require)|.

                                                              *:IcedRequireAll*
:IcedRequireAll
  Require and reload current file in current session.
  Key is mapped to |<Plug>(iced_require_all)|.

                                                                   *:IcedUndef*
:IcedUndef [{symbol}]
  Undefine {symbol} in current namespace.
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_undef)|.

                                                        *:IcedEvalOuterTopList*
:IcedEvalOuterTopList
  Work same as `<Plug>(iced_eval)<Plug>(sexp_outer_top_list)`,
  without scrolling.
  Key is mapped to |<Plug>(iced_eval_outer_top_list)|.

                                                               *:IcedPrintLast*
:IcedPrintLast
  Open a window, and show last evaluated value.
  Key is mapped to |<Plug>(iced_print_last)|.

                                                    *:IcedMacroExpandOuterList*
:IcedMacroExpandOuterList
  Work same as `<Plug>(iced_macroexpand)<Plug>(sexp_outer_list)`,
  without scrolling.
  Key is mapped to |<Plug>(iced_macroexpand_outer_list)|.

                                                   *:IcedMacroExpand1OuterList*
:IcedMacroExpand1OuterList
  Work same as `<Plug>(iced_macroexpand_1)<Plug>(sexp_outer_list)`,
  without scrolling.
  Key is mapped to |<Plug>(iced_macroexpand_1_outer_list)|.

                                                         *:IcedTestUnderCursor*
:IcedTestUnderCursor
  Run test under cursor.
  Key is mapped to |<Plug>(iced_test_under_cursor)|.

                                                           *:IcedTestRerunLast*
:IcedTestRerunLast
  Run last test again.
  Key is mapped to |<Plug>(iced_test_rerun_last)|.

                                                           *:IcedTestSpecCheck*
:IcedTestSpecCheck [{num-tests}]
  Run `clojure.spec.test.alpha/check` for the function under cursor.
  If {num-tests} is not passed, |g:iced#test#spec_num_tests| is used.
  Key is mapped to |<Plug>(iced_test_spec_check)|.

                                                          *:IcedTestBufferOpen*
:IcedTestBufferOpen
  Open test result buffer.
  Key is mapped to |<Plug>(iced_test_buffer_open)|.

                                                                  *:IcedTestNs*
:IcedTestNs
  Run tests in current namespace.
  Key is mapped to |<Plug>(iced_test_ns)|.

                                                                 *:IcedTestAll*
:IcedTestAll
  Run all tests in current project.
  Key is mapped to |<Plug>(iced_test_all)|.

                                                                *:IcedTestRedo*
:IcedTestRedo
  Re run failed tests.
  Key is mapped to |<Plug>(iced_test_redo)|.

                                                        *:IcedStdoutBufferOpen*
:IcedStdoutBufferOpen
  Open stdout buffer.
  Key is mapped to |<Plug>(iced_stdout_buffer_open)|.

                                                       *:IcedStdoutBufferClear*
:IcedStdoutBufferClear
  Clear all lines in stdout buffer.
  Key is mapped to |<Plug>(iced_stdout_buffer_clear)|.

                                                       *:IcedStdoutBufferClose*
:IcedStdoutBufferClose
  Close stdout buffer window.
  Key is mapped to |<Plug>(iced_stdout_buffer_close)|.

                                                                 *:IcedDefJump*
:IcedDefJump
  Jump cursor to definition of symbol under cursor.
  Key is mapped to |<Plug>(iced_def_jump)|.

                                                                 *:IcedDefBack*
:IcedDefBack
  Jump back cursor.
  Key is mapped to |<Plug>(iced_def_back)|.

                                                            *:IcedDocumentOpen*
:IcedDocumentOpen [{symbol}]
  Open a window, and show documents for {symbol}.
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_document_open)|.

                                                            *:IcedFormDocument*
:IcedFormDocument
  Echo one-line document for form under cursor.
  This is useful to show document while editing codes.
  See details |<Plug>(iced_form_document)|.

                                                           *:IcedDocumentClose*
:IcedDocumentClose
  Close document window.
  Key is mapped to |<Plug>(iced_document_close)|.

                                                              *:IcedSourceShow*
:IcedSourceShow [{symbol}]
  Open a window, and show source codes for {symbol}
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_source_show)|.

                                                            *:IcedGrimoireOpen*
:IcedGrimoireOpen [{symbol}]
  Open a window, and show grimoire for {symbol}
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_grimoire_open)|.

                                                          *:IcedCommandPalette*
:IcedCommandPalette
  Select command from palette.
  `ctrlp.vim` or `fzf` is required to select namespace.
  Key is mapped to |<Plug>(iced_command_palette)|.

                                                                   *:IcedSlurp*
:IcedSlurp
  Slurp next element.
  If no elements in current form, search next form and slurp.
  For searching next form, |g:iced#paredit#slurp_max_depth| is used.
  Key is mapped to |<Plug>(iced_slurp)|.

                                                                    *:IcedBarf*
:IcedBarf
  Barf last element in current form.
  Key is mapped to |<Plug>(iced_barf)|.

                                                                  *:IcedFormat*
:IcedFormat
  Reformat current form.
  Key is mapped to |<Plug>(iced_format)|.

                                                        *:IcedToggleSrcAndTest*
:IcedToggleSrcAndTest
  Switch between source file and test file.
  Key is mapped to |<Plug>(iced_toggle_src_and_test)|.

                                                                    *:IcedGrep*
:IcedGrep [{keyword}]
  Execute |:grep| command with |g:iced#grep#target|.
  If {keyword} is not passed, keyword under cursor is used.
  Key is mapped to |<Plug>(iced_grep)|.

                                                        *:IcedRelatedNamespace*
:IcedRelatedNamespace
  Browse namespaces relating to current namespace, and open selected one.
  `ctrlp.vim` or `fzf` is required to select namespace.
  Configurable option is |g:iced#related_ns#tail_patterns|.
  Key is mapped to |<Plug>(iced_related_namespace)|.

                                                              *:IcedBrowseSpec*
:IcedBrowseSpec
  Browse specs, and show spec form in document buffer.
  `ctrlp.vim` or `fzf` is required to select spec.
  Key is mapped to |<Plug>(iced_browse_spec)|.

                                                         *:IcedClearCtrlpCache*
:IcedClearCtrlpCache
  Clear ctrlp cache used by vim-iced.
  `ctrlp.vim` is required.
  Key is mapped to |<Plug>(iced_clear_ctrlp_cache)|.

                                                                 *:IcedCleanNs*
:IcedCleanNs
  Cleanup ns form.
  See https://github.com/clojure-emacs/refactor-nrepl#clean-ns
  Key is mapped to |<Plug>(iced_clean_ns)|.

                                                              *:IcedAddMissing*
:IcedAddMissing [{symbol}]
  Add missing libspec.
  If {symbol} is not passed, symbol under cursor is used.

                                                                   *:IcedAddNs*
:IcedAddNs [{ns}]
  Add require to `ns` form.
  If {ns} is not passed, select namespaces in your project
  via `ctrlp.vim` or `fzf` interface.

                                                             *:IcedThreadFirst*
:IcedThreadFirst
  Convert current outer form to use `->` threading macro.
  Ex. >
  ;; before
  (foo (bar (baz "hello")))
  ;; after
  (-> "hello" baz bar foo)
<
                                                              *:IcedThreadLast*
:IcedThreadLast
  Convert current outer form to use `->>` threading macro.
  Ex. >
  ;; before
  (foo yy (bar xx "hello"))
  ;; after
  (->> "hello" (bar xx) (foo yy))
<
                                                         *:IcedExtractFunction*
:IcedExtractFunction
  Extract the form under cursor as a function.

                                                               *:IcedMoveToLet*
:IcedMoveToLet
  Move the form under cursor to nearest `let` binding.
  If there is no `let` form in current top list,
  wrap the form with `let`.

                                                          *:IcedToggleTraceVar*
:IcedToggleTraceVar [{symbol}]
  Toggle tracing {symbol} in current namespace.
  If {symbol} is not passed, symbol under cursor is used.
  Key is mapped to |<Plug>(iced_toggle_trace_var)|.

                                                           *:IcedToggleTraceNs*
:IcedToggleTraceNs [{ns}]
  Toggle tracing {ns}.
  If {ns} is not passed, current buffer's ns name is used.
  Key is mapped to |<Plug>(iced_toggle_trace_ns)|.

                                                                *:IcedInReplNs*
:IcedInReplNs
  Sets `*ns*` to the REPL session's namespace name.
  Key is mapped to |<Plug>(iced_in_repl_ns)|.

                                                         *:IcedLintCurrentFile*
:IcedLintCurrentFile
  Lint codes in current file.
  Key is mapped to |<Plug>(iced_lint_current_file)|.

                                                              *:IcedLintToggle*
:IcedLintToggle
  Toggle linting.
  Key is mapped to |<Plug>(iced_lint_toggle)|.

                                                          *:IcedJumpToNextSign*
:IcedJumpToNextSign
  Jump cursor to next sign in current buffer.
  If search hit BOTTOM and |'wrapscan'| is enabled,
  searching sign continues at TOP.
  Key is mapped to |<Plug>(iced_jump_to_next_sign)|.

                                                          *:IcedJumpToPrevSign*
:IcedJumpToPrevSign
  Jump cursor to previous sign in current buffer.
  If search hit TOP and |'wrapscan'| is enabled,
  searching sign continues at BOTTOM.
  Key is mapped to |<Plug>(iced_jump_to_prev_sign)|.

                                                                 *:IcedGotoLet*
:IcedGotoLet
  Move cursor to nearest `let` form.
  If `let` form is not found in current top list, cursor is not moved.
  Key is mapped to |<Plug>(iced_goto_let)|.

------------------------------------------------------------------------------
FUNCTIONS                                                  *vim-iced-functions*

                                                                *iced#status()*
iced#status()
  Return vim-iced's status.
  This is useful to show status in status line.

  Ex. working with https://github.com/itchyny/lightline.vim
>
  let g:lightline = {
      \ 'active': {'right': [['iced']]},
      \ 'component_function': {'iced': 'iced#status'},
      \ }
<

------------------------------------------------------------------------------
KEY MAPPINGS                                            *vim-iced-key-mappings*

                                                         *<Plug>(iced_connect)*
<Plug>(iced_connect)
  Same as |:IcedConnect|.

                                                      *<Plug>(iced_disconnect)*
<Plug>(iced_disconnect)
  Same as |:IcedDisconnect|.

                                                       *<Plug>(iced_reconnect)*
<Plug>(iced_reconnect)
  Same as |:IcedReconnect|.

                                                       *<Plug>(iced_interrupt)*
<Plug>(iced_interrupt)
  Same as |:IcedInterrupt|.

                                                 *<Plug>(iced_start_cljs_repl)*
<Plug>(iced_start_cljs_repl)
  Same as |:IcedStartCljsRepl|.

                                                  *<Plug>(iced_quit_cljs_repl)*
<Plug>(iced_quit_cljs_repl)
  Same as |:IcedQuitCljsRepl|.

                                                            *<Plug>(iced_eval)*
<Plug>(iced_eval)
  Evaluate codes.
  Followings are examples for working with {vim-sexp}.
>
  <Plug>(iced_eval)<Plug>(sexp_inner_element)``
  <Plug>(iced_eval)<Plug>(sexp_outer_list)``
  <Plug>(iced_eval)<Plug>(sexp_outer_top_list)``
<
                                                       *<Plug>(iced_eval_repl)*
<Plug>(iced_eval_repl)
  Evaluate codes in REPL session.
  Followings are examples for working with {vim-sexp}.
>
  <Plug>(iced_eval_repl)<Plug>(sexp_inner_element)``
  <Plug>(iced_eval_repl)<Plug>(sexp_outer_list)``
  <Plug>(iced_eval_repl)<Plug>(sexp_outer_top_list)``
<
                                                         *<Plug>(iced_eval_ns)*
<Plug>(iced_eval_ns)
  Same as |:IcedEvalNs|

                                                     *<Plug>(iced_macroexpand)*
<Plug>(iced_macroexpand)
  Evaluate {macroexpand}, and show result in a window.
>
  <Plug>(iced_macroexpand)<Plug>(sexp_outer_list)``
<

                                                   *<Plug>(iced_macroexpand_1)*
<Plug>(iced_macroexpand_1)
  Evaluate {macroexpand-1}, and show result in a window.
>
  <Plug>(iced_macroexpand_1)<Plug>(sexp_outer_list)``
<

                                                         *<Plug>(iced_require)*
<Plug>(iced_require)
  Same as |:IcedRequire|.

                                                     *<Plug>(iced_require_all)*
<Plug>(iced_require_all)
  Same as |:IcedRequireAll|.

                                                           *<Plug>(iced_undef)*
<Plug>(iced_undef)
  Same as |:IcedUndef|.

                                             *<Plug>(iced_eval_outer_top_list)*
<Plug>(iced_eval_outer_top_list)
  Same as |:IcedEvalOuterTopList|.

                                                      *<Plug>(iced_print_last)*
<Plug>(iced_print_last)
  Same as |:IcedPrintLast|.

                                          *<Plug>(iced_macroexpand_outer_list)*
<Plug>(iced_macroexpand_outer_list)
  Same as |:IcedMacroExpandOuterList|.

                                        *<Plug>(iced_macroexpand_1_outer_list)*
<Plug>(iced_macroexpand_1_outer_list)
  Same as |:IcedMacroExpand1OuterList|.

                                                         *<Plug>(iced_test_ns)*
<Plug>(iced_test_ns)
  Same as |:IcedTestNs|.

                                                        *<Plug>(iced_test_all)*
<Plug>(iced_test_all)
  Same as |:IcedTestAll|.

                                                       *<Plug>(iced_test_redo)*
<Plug>(iced_test_redo)
  Same as |:IcedTestRedo|.

                                               *<Plug>(iced_test_under_cursor)*
<Plug>(iced_test_under_cursor)
  Same as |:IcedTestUnderCursor|.

                                                 *<Plug>(iced_test_rerun_last)*
<Plug>(iced_test_rerun_last)
  Same as |:IcedTestRerunLast|.

                                                 *<Plug>(iced_test_spec_check)*
<Plug>(iced_test_spec_check)
  Same as |:IcedTestSpecCheck|.

                                                *<Plug>(iced_test_buffer_open)*
<Plug>(iced_test_buffer_open)
  Same as |:IcedTestBufferOpen|.

                                              *<Plug>(iced_stdout_buffer_open)*
<Plug>(iced_stdout_buffer_open)
  Same as |:IcedStdoutBufferOpen|.

                                             *<Plug>(iced_stdout_buffer_clear)*
<Plug>(iced_stdout_buffer_clear)
  Same as |:IcedStdoutBufferClear|.

                                             *<Plug>(iced_stdout_buffer_close)*
<Plug>(iced_stdout_buffer_close)
  Same as |:IcedStdoutBufferClose|.

                                                        *<Plug>(iced_def_jump)*
<Plug>(iced_def_jump)
  Same as |:IcedDefJump|.

                                                        *<Plug>(iced_def_back)*
<Plug>(iced_def_back)
  Same as |:IcedDefBack|.

                                                   *<Plug>(iced_document_open)*
<Plug>(iced_document_open)
  Same as |:IcedDocumentOpen|.

                                                   *<Plug>(iced_form_document)*
<Plug>(iced_form_document)
  Same as |:IcedFormDocument|.
  This is convenient to display documents about the form you are editing.
>
  aug vim_iced_echo_document_setting
    au!
    au FileType clojure setl updatetime=1000
    au CursorHoldI *.clj,*.cljs,*.cljc call iced#nrepl#document#current_form()
  aug END
<
                                                  *<Plug>(iced_document_close)*
<Plug>(iced_document_close)
  Same as |:IcedDocumentClose|.

                                                     *<Plug>(iced_source_show)*
<Plug>(iced_source_show)
  Same as |:IcedSourceShow|.

                                                   *<Plug>(iced_grimoire_open)*
<Plug>(iced_grimoire_open)
  Same as |:IcedGrimoireOpen|.

                                                 *<Plug>(iced_command_palette)*
<Plug>(iced_command_palette)
  Same as |:IcedCommandPalette|.

                                                           *<Plug>(iced_slurp)*
<Plug>(iced_slurp)
  Same as |:IcedSlurp|.

                                                            *<Plug>(iced_barf)*
<Plug>(iced_barf)
  Same as |:IcedBarf|.

                                                          *<Plug>(iced_format)*
<Plug>(iced_format)
  Same as |:IcedFormat|.

                                             *<Plug>(iced_toggle_src_and_test)*
<Plug>(iced_toggle_src_and_test)
  Same as |:IcedToggleSrcAndTest|.

                                                            *<Plug>(iced_grep)*
<Plug>(iced_grep)
  Same as |:IcedGrep|.

                                               *<Plug>(iced_related_namespace)*
<Plug>(iced_related_namespace)
  Same as |:IcedRelatedNamespace|.

                                                     *<Plug>(iced_browse_spec)*
<Plug>(iced_browse_spec)
  Same as |:IcedBrowseSpec|.

                                               *<Plug>(iced_clear_ctrlp_cache)*
<Plug>(iced_clear_ctrlp_cache)
  Same as |:IcedClearCtrlpCache|.

                                                        *<Plug>(iced_clean_ns)*
<Plug>(iced_clean_ns)
  Same as |:IcedCleanNs|.

                                                     *<Plug>(iced_add_missing)*
<Plug>(iced_add_missing)
  Same as |:IcedAddMissing|.

                                                          *<Plug>(iced_add_ns)*
<Plug>(iced_add_ns)
  Same as |:IcedAddNs|.

                                                    *<Plug>(iced_thread_first)*
<Plug>(iced_thread_first)
  Same as |:IcedThreadFirst|.

                                                     *<Plug>(iced_thread_last)*
<Plug>(iced_thread_last)
  Same as |:IcedThreadLast|.

                                                *<Plug>(iced_extract_function)*
<Plug>(iced_extract_function)
  Same as |:IcedExtractFunction|.

                                                     *<Plug>(iced_move_to_let)*
<Plug>(iced_move_to_let)
  Same as |:IcedMoveToLet|.

                                                *<Plug>(iced_toggle_trace_var)*
<Plug>(iced_toggle_trace_var)
  Same as |:IcedToggleTraceVar|.

                                                 *<Plug>(iced_toggle_trace_ns)*
<Plug>(iced_toggle_trace_ns)
  Same as |:IcedToggleTraceNs|.

                                                      *<Plug>(iced_in_repl_ns)*
<Plug>(iced_in_repl_ns)
  Same as |:IcedInReplNs|.

                                               *<Plug>(iced_lint_current_file)*
<Plug>(iced_lint_current_file)
  Same as |:IcedLintCurrentFile|.

                                                     *<Plug>(iced_lint_toggle)*
<Plug>(iced_lint_toggle)
  Same as |:IcedLintToggle|.

                                               *<Plug>(iced_jump_to_next_sign)*
<Plug>(iced_jump_to_next_sign)
  Same as |:IcedJumpToNextSign|.

                                               *<Plug>(iced_jump_to_prev_sign)*
<Plug>(iced_jump_to_prev_sign)
  Same as |:IcedJumpToPrevSign|.

                                                        *<Plug>(iced_goto_let)*
<Plug>(iced_goto_let)
  Same as |:IcedGotoLet|.

==============================================================================
CUSTOMIZING                                              *vim-iced-customizing*

                                                            *g:iced#nrepl#host*
g:iced#nrepl#host
  Connection host name.
  Default value is `'127.0.0.1'`.

                                               *g:iced#paredit#slurp_max_depth*
g:iced#paredit#slurp_max_depth
  Maximum depth for slurping.
  Default value is `5`.

                                                      *g:iced#cljs#default_env*
g:iced#cljs#default_env
  Environment used when |:IcedStartCljsRepl| is called with no argument.
  Default value is `'figwheel'`.

                                                   *g:iced#eval#inside_comment*
g:iced#eval#inside_comment
  If {v:true}, evaluate inside comment form.
  Default value is `v:true`.

                                                    *g:iced#buffer#stdout#mods*
g:iced#buffer#stdout#mods
  Buffer position definition.
  Following values are supported.
  - {vertical}
  - {leftabove}
  - {aboveleft}
  - {rightbelow}
  - {belowright}
  - {topleft}
  - {botright}

                                                    *g:iced#buffer#stdout#file*
g:iced#buffer#stdout#file
  If not empty, vim-iced write stdout buffer content to the file path.
  Default value is `''`.

                                                *g:iced#buffer#document#height*
g:iced#buffer#document#height
  Document window height.
  Default value is |'previewheight'|.

                             *g:iced#buffer#document#does_update_automatically*
g:iced#buffer#document#does_update_automatically
  If {v:true} and document buffer is visible,
  update document buffer with document for the form under cursor.
  Default value is `v:false`.

                                                   *g:iced#buffer#error#height*
g:iced#buffer#error#height
  Error window height.
  Default value is |'previewheight'|.

                                                *g:iced#cljs#custom#start_code*
g:iced#cljs#custom#start_code
  Code to start CLJS REPL in {custom} environment.

                                                 *g:iced#cljs#custom#stop_code*
g:iced#cljs#custom#stop_code
  Code to stop CLJS REPL in {custom} environment.

                                                *g:iced#debug#value_max_length*
g:iced#debug#value_max_length
  Max length to show value in debugging.
  Negative value means no limitation.
  Default value is `-1`.

                                                 *g:iced#nrepl#sync#timeout_ms*
g:iced#nrepl#sync#timeout_ms
  Time to timeout (unit: milli sec).
  Default value is `3000`.

                                              *g:iced#related_ns#tail_patterns*
g:iced#related_ns#tail_patterns
  The namespace tailing pattern to decide the namespace is related or not.
  This option is used by|:IcedRelatedNamespace| command.
  Default value is `['', '-test', '-spec', '\.spec']` .

                                                   *g:iced#test#spec_num_tests*
g:iced#test#spec_num_tests
  Default num-tests for |IcedTestSpecCheck|.
  Default value is `10`.

                                                             *g:iced#qf#height*
g:iced#qf#height
  Quickfix window height.
  Default value is `5`.

                                                           *g:iced#grep#target*
g:iced#grep#target
  Grep path target.
  Following keywords are replaced.
  - `{{user.dir}}`
    Project root directory.
  - `{{separator}}`
    File path separator.

  Default value is
    `'{{user.dir}}{{separator}}**{{separator}}*.{clj,cljs,cljc}'`.

                                             *g:iced#refactor#prefix_rewriting*
g:iced#refactor#prefix_rewriting
  Should `clean-ns` favor prefix forms in the ns macro?
  c.f. https://github.com/clojure-emacs/refactor-nrepl#available-features
  Default value is `v:false`.

------------------------------------------------------------------------------
INDENT RULES                                     *vim-iced-customizing-indents*

                                                           *g:iced#format#rule*
g:iced#format#rule
  Cljfmt's formatting rule.
  See https://github.com/weavejester/cljfmt#indentation-rules
>
  let g:iced#format#rule = {
        \ 'merr.core/let': '[[:block 2] [:inner 1]]',
        \ }
<
------------------------------------------------------------------------------
LINTERS                                          *vim-iced-customizing-linters*

                                                       *g:iced#eastwood#option*
g:iced#eastwood#option
  Linting option which is used by `jonase/eastwood`.
  See details: |vim-iced-linting|

  Specific linter names are shown at:
  - https://github.com/jonase/eastwood#whats-there

  Ex. enable all linters excluding `implicit-dependencies` linter
>
  let g:iced#eastwood#option = {
      \ 'linters': ['all'],
      \ 'exclude-linters': ['implicit-dependencies'],
      \ }
<
                                                   *g:iced_enable_auto_linting*
g:iced_enable_auto_linting
  If {v:true}, enable linting automatically.
  Linting is worked when |BufWritePost|.
  See details: |vim-iced-linting|

------------------------------------------------------------------------------
COMMAND PALETTES                                 *vim-iced-customizing-palette*

                                                               *g:iced#palette*
g:iced#palette
  User custom commands.
  Ex. define command palette to start cljs REPL
>
  let g:iced#palette = {
        \ 'foo bar': ':IcedEvalRepl (cljs-repl)'
        \ }
<
------------------------------------------------------------------------------
DEFAULT KEYS                                *vim-iced-customizing-default-keys*

                                           *g:iced_enable_default_key_mappings*
g:iced_enable_default_key_mappings
  If {v:true}, apply following mappings.

  {lhs}          {rhs}
  -----------    ---------------------------------------------------
  <Leader>'      <Plug>(iced_connect)
  <Leader>ei     <Plug>(iced_eval)<Plug>(sexp_inner_element)``
  <Leader>ee     <Plug>(iced_eval)<Plug>(sexp_outer_list)``
  <Leader>et     <Plug>(iced_eval_outer_top_list)
  <Leader>er     <Plug>(iced_eval_repl)<Plug>(sexp_outer_top_list)``
  <Leader>en     <Plug>(iced_eval_ns)
  <Leader>ep     <Plug>(iced_print_last)
  <Leader>eb     <Plug>(iced_require)
  <Leader>eB     <Plug>(iced_require_all)
  <Leader>eu     <Plug>(iced_undef)
  <Leader>eM     <Plug>(iced_macroexpand_outer_list)
  <Leader>em     <Plug>(iced_macroexpand_1_outer_list)
  <Leader>tt     <Plug>(iced_test_under_cursor)
  <Leader>tl     <Plug>(iced_test_rerun_last)
  <Leader>ts     <Plug>(iced_test_spec_check)
  <Leader>to     <Plug>(iced_test_buffer_open)
  <Leader>tn     <Plug>(iced_test_ns)
  <Leader>tp     <Plug>(iced_test_all)
  <Leader>tr     <Plug>(iced_test_redo)
  <Leader>ss     <Plug>(iced_stdout_buffer_open)
  <Leader>sl     <Plug>(iced_stdout_buffer_clear)
  <Leader>sq     <Plug>(iced_stdout_buffer_close)
  <Leader>rcn    <Plug>(iced_clean_ns)
  <Leader>ram    <Plug>(iced_add_missing)
  <Leader>ran    <Plug>(iced_add_ns)
  <Leader>rtf    <Plug>(iced_thread_first)
  <Leader>rtl    <Plug>(iced_thread_last)
  <Leader>ref    <Plug>(iced_extract_function)
  <Leader>rml    <Plug>(iced_move_to_let)
  <Leader>hs     <Plug>(iced_source_show)
  <Leader>hg     <Plug>(iced_grimoire_open)
  <Leader>hh     <Plug>(iced_command_palette)
  <Leader>br     <Plug>(iced_related_namespace)
  <Leader>bs     <Plug>(iced_browse_spec)
  <Leader>jn     <Plug>(iced_jump_to_next_sign)
  <Leader>jN     <Plug>(iced_jump_to_prev_sign)
  <Leader>gl     <Plug>(iced_goto_let)
  <Leader>*      <Plug>(iced_iced)
  <Leader>/      :<C-u>IcedGrep<Space>
  <C-]>          <Plug>(iced_def_jump)
  <C-t>          <Plug>(iced_def_back)
  K              <Plug>(iced_document_open)
  ==             <Plug>(iced_format)

==============================================================================
CHANGELOG                                                  *vim-iced-changelog*

See https://github.com/liquidz/vim-iced/blob/master/CHANGELOG.adoc

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
